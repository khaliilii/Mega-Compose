name: CI/CD Full Smart Rollback

on:
  push:
    branches:
      - main
  pull_request:

env:
  DOCKER_REGISTRY: ghcr.io/USERNAME
  IMAGE_TAG: ${{ github.sha }}
  BACKUP_PATH: /tmp/backups
  DEPLOY_DIR: /home/prod/docker-compose

jobs:

  lint-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: mbstring, pdo_mysql, pdo_pgsql, redis

      - name: Install dependencies
        run: composer install --no-progress --no-interaction

      - name: Run PHP CS Fixer
        run: vendor/bin/php-cs-fixer fix --dry-run --diff

      - name: Run PHPUnit tests
        run: vendor/bin/phpunit --coverage-text

  build-and-push:
    runs-on: ubuntu-latest
    needs: lint-test
    strategy:
      matrix:
        service: [phpnginx, phpapache, backendcore, authcenter, valkey, memcached, mailpit, kopia]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-

      - name: Log in to Docker registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          docker build \
            --cache-from $DOCKER_REGISTRY/${{ matrix.service }}:latest \
            -t $DOCKER_REGISTRY/${{ matrix.service }}:$IMAGE_TAG \
            ./${{ matrix.service }}
          docker push $DOCKER_REGISTRY/${{ matrix.service }}:$IMAGE_TAG

  backup-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: SSH to Production Server for Full Backup
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            mkdir -p $BACKUP_PATH
            TIMESTAMP=$(date +%Y%m%d%H%M)

            echo "Backing up MySQL..."
            docker exec authcenter_mysql sh -c 'exec mysqldump --all-databases -uroot -p$MYSQL_ROOT_PASSWORD' > $BACKUP_PATH/mysql_$TIMESTAMP.sql

            echo "Backing up PostgreSQL..."
            docker exec authcenter_postgresql sh -c 'pg_dumpall -U root' > $BACKUP_PATH/postgres_$TIMESTAMP.sql

            echo "Backing up Redis..."
            docker exec authcenter_redis redis-cli SAVE
            docker cp authcenter_redis:/data/dump.rdb $BACKUP_PATH/redis_$TIMESTAMP.rdb

            echo "Backing up Elasticsearch..."
            curl -XPUT "localhost:9200/_snapshot/full_backup_$TIMESTAMP?wait_for_completion=true"

            echo "Backing up MinIO..."
            docker exec minio mc alias set myminio http://localhost:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD
            docker exec minio mc mirror --overwrite myminio/ /tmp/backups/minio_$TIMESTAMP

            echo "Backing up Keycloak..."
            docker exec keycloak /opt/keycloak/bin/kc.sh export --dir $BACKUP_PATH/keycloak_$TIMESTAMP

            echo "All backups completed!"

  deploy-production:
    runs-on: ubuntu-latest
    needs: backup-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Manual approval
        uses: hmarr/auto-approve-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: SSH to Production Server for Smart Deploy
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -e
            cd $DEPLOY_DIR

            docker-compose ps -q > old_containers.txt

            echo "Pulling latest Docker images..."
            docker-compose pull

            echo "Deploying new containers..."
            if ! docker-compose up -d --remove-orphans; then
              echo "‚ùå Deployment failed, rolling back containers..."
              xargs -a old_containers.txt docker start
              exit 1
            fi

            echo "Running healthcheck..."
            services=(authcenter_mysql authcenter_postgresql authcenter_redis backendcore minio keycloak elasticsearch)
            for svc in "${services[@]}"; do
              (while true; do
                 status=$(docker inspect --format='{{.State.Health.Status}}' $svc)
                 if [ "$status" == "healthy" ] || [ "$svc" == "minio" ] || [ "$svc" == "elasticsearch" ] || [ "$svc" == "keycloak" ]; then break; fi
                 echo "Waiting for $svc..."
                 sleep 5
               done) &
            done
            wait
            echo "‚úÖ Services are healthy"

            echo "Running DB migrations..."
            set +e
            docker exec backendcore php artisan migrate
            if [ $? -ne 0 ]; then
              echo "‚ö†Ô∏è Migration failed, rolling back DBs and stateful services..."
              TIMESTAMP=$(ls -t $BACKUP_PATH/mysql_*.sql | head -1 | xargs -n1 basename | sed 's/mysql_//;s/.sql//')

              echo "Restoring MySQL..."
              cat $BACKUP_PATH/mysql_$TIMESTAMP.sql | docker exec -i authcenter_mysql sh -c 'mysql -uroot -p$MYSQL_ROOT_PASSWORD'

              echo "Restoring PostgreSQL..."
              cat $BACKUP_PATH/postgres_$TIMESTAMP.sql | docker exec -i authcenter_postgresql sh -c 'psql -U root'

              echo "Restoring Redis..."
              docker cp $BACKUP_PATH/redis_$TIMESTAMP.rdb authcenter_redis:/data/dump.rdb
              docker restart authcenter_redis

              echo "Restoring MinIO..."
              docker exec minio mc mirror --overwrite /tmp/backups/minio_$TIMESTAMP myminio/

              echo "Restoring Keycloak..."
              docker exec keycloak /opt/keycloak/bin/kc.sh import --dir $BACKUP_PATH/keycloak_$TIMESTAMP

              echo "Elasticsearch snapshot restore..."
              curl -XPOST "localhost:9200/_snapshot/full_backup_$TIMESTAMP/_restore?wait_for_completion=true"

              xargs -a old_containers.txt docker start
              echo "Rollback complete"
              exit 1
            fi
            set -e

            echo "üéâ Deployment and all services are healthy."

      - name: Slack Notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL }}
          slack-token: ${{ secrets.SLACK_TOKEN }}
          text: |
            ${{ job.status == 'success' && '‚úÖ Full production deployment successful!' || '‚ö†Ô∏è Deployment or rollback executed due to failure.' }}
